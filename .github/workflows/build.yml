name: build

# Controls when the action will run
on:

  # Trigger the workflow on all pushes, except on tag creation
  push:
    branches:
    - '**'
    tags-ignore:
    - '**'

  # Trigger the workflow on all pull requests
  pull_request: ~

  # Allow workflow to be dispatched on demand
  workflow_dispatch: ~

env:
  ECWAM_TOOLS: ${{ github.workspace }}/.github/tools
  CTEST_PARALLEL_LEVEL: 1
  CACHE_SUFFIX: v0         # Increase to force new cache to be created

jobs:
  ci:
    name: ci

    strategy:
      fail-fast: false  # false: try to complete all jobs

      matrix:
        #build_type: [Release,Debug] # Debug tests takes too long
        build_type: [Release]
        name:
          - linux gnu-10
          - linux clang-12
          - linux nvhpc-21.9
          - linux intel
          - macos

        include:

          - name: linux gnu-10
            os: ubuntu-20.04
            compiler: gnu-10
            compiler_cc: gcc-10
            compiler_cxx: g++-10
            compiler_fc: gfortran-10
            caching: true

          - name: linux clang-12
            os: ubuntu-20.04
            compiler: clang-12
            compiler_cc: clang-12
            compiler_cxx: clang++-12
            compiler_fc: gfortran-10
            caching: true

          - name: linux clang-12
            build_type: Release
            os: ubuntu-20.04
            compiler: clang-12
            compiler_cc: clang-12
            compiler_cxx: clang++-12
            compiler_fc: gfortran-10
            caching: true

          - name: linux nvhpc-21.9
            os: ubuntu-20.04
            compiler: nvhpc-21.9
            compiler_cc: nvc
            compiler_cxx: nvc++
            compiler_fc: nvfortran
            cmake_options: -DCMAKE_CXX_FLAGS=--diag_suppress177
            caching: true

          - name : linux intel
            os: ubuntu-20.04
            compiler: intel-oneapi
            compiler_cc: icc
            compiler_cxx: icpc
            compiler_fc: ifort
            caching: true

          - name: macos
            # Xcode compiler requires empty environment variables, so we pass null (~) here
            os: macos-11
            compiler: clang-12
            compiler_cc: ~
            compiler_cxx: ~
            compiler_fc: gfortran-11
            caching: true

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Environment
      run:  |
        echo "DEPS_DIR=${{ runner.temp }}/deps" >> $GITHUB_ENV
        echo "CC=${{ matrix.compiler_cc }}"     >> $GITHUB_ENV
        echo "CXX=${{ matrix.compiler_cxx }}"   >> $GITHUB_ENV
        echo "FC=${{ matrix.compiler_fc }}"     >> $GITHUB_ENV

        if [[ "${{ matrix.os }}" =~ macos ]]; then
          export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
          export HOMEBREW_NO_AUTO_UPDATE=1
          export HOMEBREW_NO_INSTALL_CLEANUP=1
          echo "HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1" >> $GITHUB_ENV
          echo "HOMEBREW_NO_AUTO_UPDATE=1"                >> $GITHUB_ENV
          echo "HOMEBREW_NO_INSTALL_CLEANUP=1"            >> $GITHUB_ENV
          brew install ninja
          brew install libomp
          brew install libaec
          brew install coreutils
        else
          sudo apt-get update
          sudo apt-get install libaec-dev
          sudo apt-get install ninja-build
        fi

        pip3 install pyyaml
        pip3 install numpy

        printenv

    - name: Cache Dependencies
      # There seems to be a problem with cached NVHPC dependencies, leading to SIGILL perhaps due to slightly different architectures
      if: matrix.caching
      id: deps-cache
      uses: pat-s/always-upload-cache@v2.1.5
      with:
        path: ${{ env.DEPS_DIR }}
        key: deps-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ env.CACHE_SUFFIX }}

    - name: Install NVHPC compiler
      if: contains( matrix.compiler, 'nvhpc' )
      shell: bash -eux {0}
      run: |
        ${ECWAM_TOOLS}/install-nvhpc.sh --prefix /opt/nvhpc
        source /opt/nvhpc/env.sh
        echo "${NVHPC_DIR}/compilers/bin"                   >> $GITHUB_PATH
        [ -z ${MPI_HOME+x} ] || echo "MPI_HOME=${MPI_HOME}" >> $GITHUB_ENV
        echo "localhost slots=72" >> ${MPI_HOME}/etc/openmpi-default-hostfile
        echo "ECWAM_LAUNCH_SERIAL_MPI=1" >> $GITHUB_ENV


    - name: Install Intel oneAPI compiler
      if: contains( matrix.compiler, 'intel' )
      run: |
        ${ECWAM_TOOLS}/install-intel-oneapi.sh
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV
        echo "CACHE_SUFFIX=$(icc -dumpversion)" >> $GITHUB_ENV

    - name: Install MPI
      shell: bash -eux {0}
      run: |
        FCFLAGS=-fPIC CFLAGS=-fPIC FFLAGS=-fPIC ${ECWAM_TOOLS}/install-mpi.sh --mpi openmpi --prefix  ${DEPS_DIR}/openmpi
        [ -f ${DEPS_DIR}/openmpi/env.sh ] && source ${DEPS_DIR}/openmpi/env.sh
        [ -z ${MPI_HOME+x} ] || echo "MPI_HOME=${MPI_HOME}" >> $GITHUB_ENV

    - name: Set Build & Test Environment
      run: |

        # Add mpirun to path for testing
        [ -z ${MPI_HOME+x} ] || echo "${MPI_HOME}/bin" >> $GITHUB_PATH


    - name: Build & Test
      id: build-test
      uses: ecmwf-actions/build-package@v2
      with:
        self_coverage: false
        force_build: true
        cache_suffix: "${{ matrix.build_type }}-${{ env.CACHE_SUFFIX }}"
        recreate_cache: ${{ matrix.caching == false }}
        dependencies: |
          ecmwf/ecbuild
          ecmwf/eccodes
          ecmwf-ifs/fiat
        dependency_branch: develop
        dependency_cmake_options: |
          ecmwf-ifs/fiat: "-G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DENABLE_TESTS=OFF"
          ecmwf/eccodes: "-G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DENABLE_MEMFS=ON -DENABLE_JPG=OFF"
        cmake_options: "-G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ${{ matrix.cmake_options }} -DENABLE_MPI=ON"
        ctest_options: "${{ matrix.ctest_options }}"

    - name: Verify tools
      run: |
        export PATH=${{ steps.build-test.outputs.bin_path }}:$PATH

        echo "+ ecwam --info"
        ecwam --info

#    - name: Codecov Upload
#      if: steps.build-test.outputs.coverage_file
#      uses: codecov/codecov-action@v2
#      with:
#        files: ${{ steps.build-test.outputs.coverage_file }}
